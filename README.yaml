---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name : Terraform Module API-GATEWAY-V2

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-api-gateway

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/clouddrove/terraform-aws-api-gateway.svg"
    url: "https://github.com/clouddrove/terraform-aws-api-gateway/releases/latest"
  - name: "tfsec"
    image: "https://github.com/clouddrove/terraform-aws-api-gateway/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-aws-api-gateway/actions/workflows/tfsec.yml"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"

#  description of this project
description: |-
  Terraform module api-gateway-v2 to create new modules using this as baseline
# extra content
include:
  - "terraform.md"

# How to use this project
# How to use this project
usage: |-
  Here are examples of how you can use this module in your inventory structure:
  ### complete Example
  ```hcl
    module "api-gateway" {
      source        = "clouddrove/api-gateway/aws"
      version       = "1.4.0"
  
      domain_name                 = "example.cam"
      domain_name_certificate_arn = module.acm.arn
      integration_uri             = module.lambda.arn
      zone_id  = "1234059QJ345674343"
      create_vpc_link_enabled = false
      cors_configuration = {
        allow_credentials = true
        allow_methods     = ["GET", "OPTIONS", "POST"]
        max_age           = 5
      }
      integrations = {
        "ANY /" = {
          lambda_arn             = module.lambda.arn
          payload_format_version = "2.0"
          timeout_milliseconds   = 12000
        }
        "GET /some-route-with-authorizer" = {
          lambda_arn             = module.lambda.arn
          payload_format_version = "2.0"
          authorizer_key         = "cognito"
        }
        "POST /start-step-function" = {
          lambda_arn             = module.lambda.arn
          payload_format_version = "2.0"
          authorizer_key         = "cognito"
        }
      }
    }
  ```
  ### vpc_link_api Example
  ```hcl
    module "api-gateway" {
      source        = "clouddrove/api-gateway/aws"
      version       = "1.4.0"

       name        = "api"
      environment = "test"
      label_order = ["environment", "name"]
      domain_name                  = "example.cam"
      create_vpc_link_enabled = true
      zone_id         = "1`23456059QJZ25345678"
      integration_uri = module.lambda.arn
      domain_name_certificate_arn  = module.acm.arn
      subnet_ids                   = tolist(module.public_subnets.public_subnet_id)
      security_group_ids           = [module.security_group.security_group_ids]
      cors_configuration = {
        allow_credentials = true
        allow_methods     = ["GET", "OPTIONS", "POST"]
        max_age           = 5
      }
      integrations = {
        "ANY /" = {
          lambda_arn             = module.lambda.arn
          payload_format_version = "2.0"
          timeout_milliseconds   = 12000
        }
        "GET /some-route-with-authorizer" = {
          lambda_arn             = module.lambda.arn
          payload_format_version = "2.0"
          authorizer_key         = "cognito"
        }
        "POST /start-step-function" = {
          lambda_arn             = module.lambda.arn
          payload_format_version = "2.0"
          authorizer_key         = "cognito"
        }
      }
    }
  ```